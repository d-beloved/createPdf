{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","components/Profile.js","utils/history.js","components/Main.js","components/PrivateRoute.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","Auth0Provider","children","onRedirectCallback","initOptions","useState","isAuthenticated","setIsAuthenticated","user","setUser","auth0Client","setAuth0","loading","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","loginWithRedirect","getTokenSilently","getTokenWithPopup","logout","NavBar","class","onClick","Profile","src","picture","alt","name","email","JSON","stringify","createBrowserHistory","Main","state","description","handleChange","target","setState","createAndDownloadPdf","axios","post","then","get","responseType","res","pdfBlob","Blob","data","type","saveAs","className","align","placeholder","id","onChange","this","Component","PrivateRoute","component","path","rest","targetUrl","fn","render","props","App","Boolean","hostname","match","ReactDOM","domain","config","client_id","clientId","redirect_uri","origin","push","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.22ce6b08.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\") &&\n          window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <nav class=\"container\">\n        <h1>PDF GENERATE</h1>\n        <button onClick={() => loginWithRedirect({})}>Log in</button>\n      </nav>\n      )}\n\n      {isAuthenticated && (\n        <span>\n          <nav class=\"container\">\n            <h1>PDF GENERATE</h1>\n          <button onClick={() => logout({})}>Log Out</button>\n          </nav>\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default NavBar;","import React, { Fragment } from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <Fragment>\n      <img src={user.picture} alt=\"Profile\" />\n\n      <h2>{user.name}</h2>\n      <p>{user.email}</p>\n      <code>{JSON.stringify(user, null, 2)}</code>\n    </Fragment>\n  );\n};\n\nexport default Profile;","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\n\nclass Main extends Component {\n  state = {\n    name: '',\n    description: '',\n        // more state variables\n  }\n\n  handleChange = ({ target: { value, name }}) => this.setState({ [name]: value })\n\n  createAndDownloadPdf = () => {\n    axios.post('/create-pdf', this.state)\n      .then(() => axios.get('fetch-pdf', { responseType: 'blob' }))\n      .then((res) => {\n        const pdfBlob = new Blob([res.data], { type: 'application/pdf' });\n\n        saveAs(pdfBlob, 'WO.pdf');\n      })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div class=\"main\">\n        <p class=\"sign\" align=\"center\">Make A New Work Order</p>\n        {/* more input tags */}\n        <textarea class=\"un \" type=\"text\" placeholder=\"Work Order Information\" name=\"wo\" id=\"wo\" onChange={this.handleChange}/>\n        <textarea class=\"pass\" type=\"text\" placeholder=\"Description\" name=\"description\" onChange={this.handleChange}/>\n        <button class=\"submit\" onClick={this.createAndDownloadPdf}>Download PDF</button>\n         \n\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import React, { useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst PrivateRoute = ({ component: Component, path, ...rest }) => {\n  const { loading, isAuthenticated, loginWithRedirect } = useAuth0();\n\n  useEffect(() => {\n    if (loading || isAuthenticated) {\n      return;\n    }\n    const fn = async () => {\n      await loginWithRedirect({\n        appState: {targetUrl: window.location.pathname}\n      });\n    };\n    fn();\n  }, [loading, isAuthenticated, loginWithRedirect, path]);\n\n  const render = props =>\n    isAuthenticated === true ? <Component {...props} /> : null;\n\n  return <Route path={path} render={render} {...rest} />;\n};\n\nexport default PrivateRoute;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { saveAs } from 'file-saver';\n\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport Profile from \"./components/Profile\";\nimport history from \"./utils/history\";\nimport Main from './components/Main';\nimport PrivateRoute from \"./components/PrivateRoute\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Don't forget to include the history module */}\n      <Router history={history}>\n        <header>\n          <NavBar />\n        </header>\n        <Switch>\n          <PrivateRoute path=\"/\" component={Main} />\n          <Route path=\"/profile\" component={Profile} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\n// class App extends Component {\n//   state = {\n//     name: '',\n//     description: '',\n//         // more state variables\n//   }\n\n//   handleChange = ({ target: { value, name }}) => this.setState({ [name]: value })\n\n//   createAndDownloadPdf = () => {\n//     axios.post('/create-pdf', this.state)\n//       .then(() => axios.get('fetch-pdf', { responseType: 'blob' }))\n//       .then((res) => {\n//         const pdfBlob = new Blob([res.data], { type: 'application/pdf' });\n\n//         saveAs(pdfBlob, 'WO.pdf');\n//       })\n//   }\n\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <div class=\"main\">\n//         <p class=\"sign\" align=\"center\">Make A New Work Order</p>\n//         {/* more input tags */}\n//         <textarea class=\"un \" type=\"text\" placeholder=\"Work Order Information\" name=\"wo\" id=\"wo\" onChange={this.handleChange}/>\n//         <textarea class=\"pass\" type=\"text\" placeholder=\"Description\" name=\"description\" onChange={this.handleChange}/>\n//         <button class=\"submit\" onClick={this.createAndDownloadPdf}>Download PDF</button>\n         \n\n//        </div>\n//       </div>\n//     );\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  history.push(\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n  >\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}